#--Task 1------------------------------------------
# Importing libraries needed for the analysis

library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(zoo)

# ------Read GeoHealth Data and Addis Ababa 2018 csv files-----------

geohealth_data <- read_csv("GeoHealth_Data.csv")
addis_ababa_2018 <- read_csv("addis_ababa_2018_pm2.csv")

#---Task 2----Data Cleaning----------
#---------Hourly Aggregate_-------------
# Convert the 'Date (LT)' column to a proper date-time format

addis_ababa_2018 <- addis_ababa_2018 %>%
  mutate(`Date (LT)` = ymd_h(paste(Year, Month, Day, Hour, sep = "-"))
  )

# Replace -999 with NA for proper imputation ------------------

addis_ababa_2018$`Raw Conc.`[addis_ababa_2018$`Raw Conc.` == -999] <- NA

# Perform the hourly aggregation with imputation --------------------------

addis_hourly_clean <- addis_ababa_2018 %>%
  mutate(hour = floor_date(`Date (LT)`, "hour")) %>%
  group_by(hour) %>%
  summarise(ConcHR = mean(`Raw Conc.`, na.rm = TRUE))

# Convert the 'Time' column in geohealth data to a proper date-time format with the year 2018

geohealth_data <- geohealth_data %>%
  mutate(Time = ymd_hms(paste("2018", Month, DD, hr, "00", "00", sep = "-")))

# Replace 99999 with NA for proper imputation
geohealth_data$`ConcHR(ug/m3)`[geohealth_data$`ConcHR(ug/m3)` == 99999] <- NA

# Perform the hourly aggregation for geohealth_data with imputation
geohealth_hourly_clean <- geohealth_data %>%
  mutate(hour = floor_date(Time, "hour")) %>%
  group_by(hour) %>%
  summarise(ConcHR = mean(`ConcHR(ug/m3)`, na.rm = TRUE))

# --- Task 3: Daily Aggregation ---
geohealth_daily_clean <- geohealth_hourly_clean %>%
  mutate(date = as.Date(hour)) %>%
  filter(ConcHR <= 1000) %>%
  group_by(date) %>%
  summarise(ConcHR = mean(ConcHR, na.rm = TRUE))

addis_daily_clean <- addis_hourly_clean %>%
  mutate(date = as.Date(hour)) %>%
  filter(ConcHR >= 0 & ConcHR <= 1000) %>%
  group_by(date) %>%
  summarise(ConcHR = mean(ConcHR, na.rm = TRUE))

# --- Task 4: Plot Daily Line Charts Separately ---
ggplot(geohealth_daily_clean, aes(x = date, y = ConcHR)) +
  geom_line(color = "blue") +
  labs(title = "Daily PM2.5 Concentration - GeoHealth Data", x = "Date", y = "PM2.5 Concentration (ug/m3)") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week") +
  theme_minimal()

ggplot(addis_daily_clean, aes(x = date, y = ConcHR)) +
  geom_line(color = "red") +
  labs(title = "Daily PM2.5 Concentration - Addis Ababa 2018 Data", x = "Date", y = "PM2.5 Concentration (ug/m3)") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week") +
  theme_minimal()

# --- Task 5: Combine GeoHealth and Addis Ababa Daily Data for Comparison ---
combined_daily_data <- bind_rows(
  mutate(geohealth_daily_clean, Source = "GeoHealth"),
  mutate(addis_daily_clean, Source = "Addis Ababa")
)

ggplot(combined_daily_data, aes(x = date, y = ConcHR, color = Source)) +
  geom_line(size = 1) +
  labs(title = "Daily PM2.5 Concentration: GeoHealth vs Addis Ababa", x = "Date", y = "PM2.5 Concentration (ug/m3)", color = "Data Source") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week") +
  theme_minimal() +
  theme(legend.position = "top")

# --- Task 6: Classify PM2.5 Levels Based on WHO Air Quality Guidelines ---
classify_pm25 <- function(conc) {
  if (conc <= 12) {
    return("Good")
  } else if (conc <= 35.4) {
    return("Moderate")
  } else if (conc <= 55.4) {
    return("Unhealthy for Sensitive Groups")
  } else if (conc <= 150.4) {
    return("Unhealthy")
  } else {
    return("Very Unhealthy")
  }
}

geohealth_daily_clean <- geohealth_daily_clean %>%
  mutate(AirQuality = sapply(ConcHR, classify_pm25))

addis_daily_clean <- addis_daily_clean %>%
  mutate(AirQuality = sapply(ConcHR, classify_pm25))

# --- Task 7: Plot with PM2.5 Categories ---
ggplot(geohealth_daily_clean, aes(x = date, y = ConcHR, color = AirQuality)) +
  geom_line(size = 1) +
  labs(title = "Daily PM2.5 Concentration - GeoHealth Data", x = "Date", y = "PM2.5 Concentration (ug/m3)") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week") +
  theme_minimal()

ggplot(addis_daily_clean, aes(x = date, y = ConcHR, color = AirQuality)) +
  geom_line(size = 1) +
  labs(title = "Daily PM2.5 Concentration - Addis Ababa Data", x = "Date", y = "PM2.5 Concentration (ug/m3)") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 week") +
  theme_minimal()

# --- Task 8: PM2.5 Trend with Rolling Average ---
geohealth_daily_clean <- geohealth_daily_clean %>%
  mutate(Rolling_Avg = rollmean(ConcHR, k = 7, fill = NA, align = "right"))

addis_daily_clean <- addis_daily_clean %>%
  mutate(Rolling_Avg = rollmean(ConcHR, k = 7, fill = NA, align = "right"))

# Plot with rolling average
ggplot(geohealth_daily_clean, aes(x = date)) +
  geom_line(aes(y = ConcHR), color = "blue", alpha = 0.5) +
  geom_line(aes(y = Rolling_Avg), color = "darkblue")

ggplot(addis_daily_clean, aes(x = date)) +
  geom_line(aes(y = ConcHR), color = "red", alpha = 0.5) +
  geom_line(aes(y = Rolling_Avg), color = "darkred")


# --- Task 9: Bar Chart Visualization for Air Quality ---

# GeoHealth Air Quality Bar Chart
ggplot(geohealth_daily_clean, aes(x = AirQuality, fill = AirQuality)) +
  geom_bar() +
  labs(title = "Frequency of Air Quality Levels - GeoHealth", x = "Air Quality Category", y = "Count") +
  theme_minimal()

# Addis Ababa Air Quality Bar Chart
ggplot(addis_daily_clean, aes(x = AirQuality, fill = AirQuality)) +
  geom_bar() +
  labs(title = "Frequency of Air Quality Levels - Addis Ababa", x = "Air Quality Category", y = "Count") +
  theme_minimal()


#------ Task 10: T - test ------------------------------

t_test_result <- t.test(geohealth_daily_clean$ConcHR, addis_daily_clean$ConcHR)
print(t_test_result)

# --- Task 11: Rolling Average and Distribution Visualization ---

# Calculate 7-day rolling average for both datasets
geohealth_daily_clean <- geohealth_daily_clean %>%
  mutate(RollingAvg = zoo::rollmean(ConcHR, k = 7, fill = NA, align = "right"))

addis_daily_clean <- addis_daily_clean %>%
  mutate(RollingAvg = zoo::rollmean(ConcHR, k = 7, fill = NA, align = "right"))

# Plot the rolling average for both datasets
ggplot() +
  geom_line(data = geohealth_daily_clean, aes(x = date, y = RollingAvg, color = "GeoHealth"), size = 1) +
  geom_line(data = addis_daily_clean, aes(x = date, y = RollingAvg, color = "Addis Ababa"), size = 1) +
  labs(title = "7-Day Rolling Average of PM2.5 Concentration",
       x = "Date", y = "PM2.5 Concentration (µg/m³)", color = "Source") +
  theme_minimal()

# Boxplot Comparison
combined_daily_data <- bind_rows(
  mutate(geohealth_daily_clean, Source = "GeoHealth"),
  mutate(addis_daily_clean, Source = "Addis Ababa")
)

ggplot(combined_daily_data, aes(x = Source, y = ConcHR, fill = Source)) +
  geom_boxplot() +
  labs(title = "Boxplot of PM2.5 Concentration by Source",
       x = "Data Source", y = "PM2.5 Concentration (µg/m³)") +
  theme_minimal()
